package log_test

import (
	"context"
	"io/ioutil"
	"os"
	"strings"
	"testing"

	"{{ .Module }}/infra"
	"{{ .Module }}/infra/log"
	"github.com/google/go-cmp/cmp"
)

func TestNewClient(t *testing.T) {
	t.Run("should return the log client", func(t *testing.T) {
		log := log.NewClient(log.ClientInput{
			Level: infra.SeverityInfo,
		})

		if log == nil {
			t.Fatal("should construct the client correctly")
		}
	})

	t.Run("should return the log client when the log level is missing", func(t *testing.T) {
		log := log.NewClient(log.ClientInput{})

		if log == nil {
			t.Fatal("should construct the client correctly")
		}
	})

	t.Run("should return the log client when the log level is wrong", func(t *testing.T) {
		log := log.NewClient(log.ClientInput{
			Level: infra.Severity("mock"),
		})

		if log == nil {
			t.Fatal("should construct the client correctly")
		}
	})
}

func TestCritical(t *testing.T) {
	tt := []struct {
		name   string
		ctx    context.Context
		expect string
	}{
		// #1
		{
			name:   "should log without context id",
			ctx:    context.Background(),
			expect: `{"severity":"Critical","message":"[mock]: test"}`,
		},

		// #2
		{
			name:   "should log with context id when the context has value for the id",
			ctx:    context.WithValue(context.Background(), infra.IDContextValueKey, "123"),
			expect: `{"contextID":"123","severity":"Critical","message":"[mock]: test"}`,
		},
	}

	for _, tc := range tt {
		log := log.NewClient(log.ClientInput{})

		out := captureOutput(func() {
			log.Critical(tc.ctx, infra.OpName("mock"), "test")
		})

		if diff := cmp.Diff(tc.expect, out); diff != "" {
			t.Fatalf("log.Critical() mismatch (-want, +got):\n%s", diff)
		}
	}
}

func TestCriticalf(t *testing.T) {
	tt := []struct {
		name   string
		ctx    context.Context
		msg    string
		args   []interface{}
		expect string
	}{
		{
			name:   "should log without context id",
			ctx:    context.Background(),
			msg:    "test %s",
			args:   []interface{}{"test"},
			expect: `{"severity":"Critical","message":"[mock]: test test"}`,
		},

		// #2
		{
			name:   "should log with context id when the context has value for the id",
			ctx:    context.WithValue(context.Background(), infra.IDContextValueKey, "123"),
			msg:    "test %s %s",
			args:   []interface{}{"test", "test"},
			expect: `{"contextID":"123","severity":"Critical","message":"[mock]: test test test"}`,
		},

		// #3
		{
			name:   "should log without placeholders",
			ctx:    context.WithValue(context.Background(), infra.IDContextValueKey, "123"),
			msg:    "test",
			expect: `{"contextID":"123","severity":"Critical","message":"[mock]: test"}`,
		},
	}

	for _, tc := range tt {
		log := log.NewClient(log.ClientInput{})

		out := captureOutput(func() {
			log.Criticalf(tc.ctx, infra.OpName("mock"), tc.msg, tc.args...)
		})

		if diff := cmp.Diff(tc.expect, out); diff != "" {
			t.Fatalf("log.Criticalf() mismatch (-want, +got):\n%s", diff)
		}
	}
}

func TestCriticalMetadata(t *testing.T) {
	tt := []struct {
		name   string
		ctx    context.Context
		expect string
	}{
		// #1
		{
			name:   "should log without context id",
			ctx:    context.Background(),
			expect: `{"severity":"Critical","metadata":{"test":true},"message":"[mock]: test"}`,
		},

		// #2
		{
			name:   "should log with context id when the context has value for the id",
			ctx:    context.WithValue(context.Background(), infra.IDContextValueKey, "123"),
			expect: `{"contextID":"123","severity":"Critical","metadata":{"test":true},"message":"[mock]: test"}`,
		},
	}

	for _, tc := range tt {
		log := log.NewClient(log.ClientInput{})

		out := captureOutput(func() {
			log.CriticalMetadata(tc.ctx, infra.OpName("mock"), "test", infra.Metadata{
				"test": true,
			})
		})

		if diff := cmp.Diff(tc.expect, out); diff != "" {
			t.Fatalf("log.CriticalMetadata() mismatch (-want, +got):\n%s", diff)
		}
	}
}

func TestError(t *testing.T) {
	tt := []struct {
		name   string
		ctx    context.Context
		level  infra.Severity
		expect string
	}{
		// #1
		{
			name:   "should log without context id",
			ctx:    context.Background(),
			expect: `{"severity":"Error","message":"[mock]: test"}`,
		},

		// #2
		{
			name:   "should log with context id when the context has value for the id",
			ctx:    context.WithValue(context.Background(), infra.IDContextValueKey, "123"),
			expect: `{"contextID":"123","severity":"Error","message":"[mock]: test"}`,
		},

		// #3
		{
			name:   "should not log when the severity is critical",
			level:  infra.SeverityCritical,
			ctx:    context.Background(),
			expect: "",
		},
	}

	for _, tc := range tt {
		log := log.NewClient(log.ClientInput{
			Level: tc.level,
		})

		out := captureOutput(func() {
			log.Error(tc.ctx, infra.OpName("mock"), "test")
		})

		if diff := cmp.Diff(tc.expect, out); diff != "" {
			t.Fatalf("log.Error() mismatch (-want, +got):\n%s", diff)
		}
	}
}

func TestErrorf(t *testing.T) {
	tt := []struct {
		name   string
		ctx    context.Context
		level  infra.Severity
		msg    string
		args   []interface{}
		expect string
	}{
		{
			name:   "should log without context id",
			ctx:    context.Background(),
			msg:    "test %s",
			args:   []interface{}{"test"},
			expect: `{"severity":"Error","message":"[mock]: test test"}`,
		},

		// #2
		{
			name:   "should log with context id when the context has value for the id",
			ctx:    context.WithValue(context.Background(), infra.IDContextValueKey, "123"),
			msg:    "test %s %s",
			args:   []interface{}{"test", "test"},
			expect: `{"contextID":"123","severity":"Error","message":"[mock]: test test test"}`,
		},

		// #3
		{
			name:   "should log without placeholders",
			ctx:    context.WithValue(context.Background(), infra.IDContextValueKey, "123"),
			msg:    "test",
			expect: `{"contextID":"123","severity":"Error","message":"[mock]: test"}`,
		},

		// #4
		{
			name:   "should not log when the severity is critical",
			ctx:    context.Background(),
			level:  infra.SeverityCritical,
			msg:    "test",
			expect: "",
		},
	}

	for _, tc := range tt {
		log := log.NewClient(log.ClientInput{
			Level: tc.level,
		})

		out := captureOutput(func() {
			log.Errorf(tc.ctx, infra.OpName("mock"), tc.msg, tc.args...)
		})

		if diff := cmp.Diff(tc.expect, out); diff != "" {
			t.Fatalf("log.Errorf() mismatch (-want, +got):\n%s", diff)
		}
	}
}

func TestErrorMetadata(t *testing.T) {
	tt := []struct {
		name   string
		ctx    context.Context
		level  infra.Severity
		expect string
	}{
		// #1
		{
			name:   "should log without context id",
			ctx:    context.Background(),
			expect: `{"severity":"Error","metadata":{"test":true},"message":"[mock]: test"}`,
		},

		// #2
		{
			name:   "should log with context id when the context has value for the id",
			ctx:    context.WithValue(context.Background(), infra.IDContextValueKey, "123"),
			expect: `{"contextID":"123","severity":"Error","metadata":{"test":true},"message":"[mock]: test"}`,
		},

		// #3
		{
			name:   "should not log when the severity is critical",
			ctx:    context.Background(),
			level:  infra.SeverityCritical,
			expect: "",
		},
	}

	for _, tc := range tt {
		log := log.NewClient(log.ClientInput{
			Level: tc.level,
		})

		out := captureOutput(func() {
			log.ErrorMetadata(tc.ctx, infra.OpName("mock"), "test", infra.Metadata{
				"test": true,
			})
		})

		if diff := cmp.Diff(tc.expect, out); diff != "" {
			t.Fatalf("log.ErrorMetadata() mismatch (-want, +got):\n%s", diff)
		}
	}
}

func TestWarning(t *testing.T) {
	tt := []struct {
		name   string
		ctx    context.Context
		level  infra.Severity
		expect string
	}{
		// #1
		{
			name:   "should log without context id",
			ctx:    context.Background(),
			expect: `{"severity":"Warning","message":"[mock]: test"}`,
		},

		// #2
		{
			name:   "should log with context id when the context has value for the id",
			ctx:    context.WithValue(context.Background(), infra.IDContextValueKey, "123"),
			expect: `{"contextID":"123","severity":"Warning","message":"[mock]: test"}`,
		},

		// #3
		{
			name:   "should not log when the severity is critical",
			level:  infra.SeverityCritical,
			ctx:    context.Background(),
			expect: "",
		},

		// #4
		{
			name:   "should not log when the severity is error",
			level:  infra.SeverityError,
			ctx:    context.Background(),
			expect: "",
		},
	}

	for _, tc := range tt {
		log := log.NewClient(log.ClientInput{
			Level: tc.level,
		})

		out := captureOutput(func() {
			log.Warning(tc.ctx, infra.OpName("mock"), "test")
		})

		if diff := cmp.Diff(tc.expect, out); diff != "" {
			t.Fatalf("log.Warning() mismatch (-want, +got):\n%s", diff)
		}
	}
}

func TestWarningf(t *testing.T) {
	tt := []struct {
		name   string
		ctx    context.Context
		level  infra.Severity
		msg    string
		args   []interface{}
		expect string
	}{
		{
			name:   "should log without context id",
			ctx:    context.Background(),
			msg:    "test %s",
			args:   []interface{}{"test"},
			expect: `{"severity":"Warning","message":"[mock]: test test"}`,
		},

		// #2
		{
			name:   "should log with context id when the context has value for the id",
			ctx:    context.WithValue(context.Background(), infra.IDContextValueKey, "123"),
			msg:    "test %s %s",
			args:   []interface{}{"test", "test"},
			expect: `{"contextID":"123","severity":"Warning","message":"[mock]: test test test"}`,
		},

		// #3
		{
			name:   "should log without placeholders",
			ctx:    context.WithValue(context.Background(), infra.IDContextValueKey, "123"),
			msg:    "test",
			expect: `{"contextID":"123","severity":"Warning","message":"[mock]: test"}`,
		},

		// #4
		{
			name:   "should not log when the severity is critical",
			ctx:    context.Background(),
			level:  infra.SeverityCritical,
			msg:    "test",
			expect: "",
		},

		// #5
		{
			name:   "should not log when the severity is error",
			ctx:    context.Background(),
			level:  infra.SeverityError,
			msg:    "test",
			expect: "",
		},
	}

	for _, tc := range tt {
		log := log.NewClient(log.ClientInput{
			Level: tc.level,
		})

		out := captureOutput(func() {
			log.Warningf(tc.ctx, infra.OpName("mock"), tc.msg, tc.args...)
		})

		if diff := cmp.Diff(tc.expect, out); diff != "" {
			t.Fatalf("log.Warningf() mismatch (-want, +got):\n%s", diff)
		}
	}
}

func TestWarningMetadata(t *testing.T) {
	tt := []struct {
		name   string
		ctx    context.Context
		level  infra.Severity
		expect string
	}{
		// #1
		{
			name:   "should log without context id",
			ctx:    context.Background(),
			expect: `{"severity":"Warning","metadata":{"test":true},"message":"[mock]: test"}`,
		},

		// #2
		{
			name:   "should log with context id when the context has value for the id",
			ctx:    context.WithValue(context.Background(), infra.IDContextValueKey, "123"),
			expect: `{"contextID":"123","severity":"Warning","metadata":{"test":true},"message":"[mock]: test"}`,
		},

		// #3
		{
			name:   "should not log when the severity is critical",
			ctx:    context.Background(),
			level:  infra.SeverityCritical,
			expect: "",
		},

		// #4
		{
			name:   "should not log when the severity is error",
			ctx:    context.Background(),
			level:  infra.SeverityError,
			expect: "",
		},
	}

	for _, tc := range tt {
		log := log.NewClient(log.ClientInput{
			Level: tc.level,
		})

		out := captureOutput(func() {
			log.WarningMetadata(tc.ctx, infra.OpName("mock"), "test", infra.Metadata{
				"test": true,
			})
		})

		if diff := cmp.Diff(tc.expect, out); diff != "" {
			t.Fatalf("log.WarningMetadata() mismatch (-want, +got):\n%s", diff)
		}
	}
}

func TestInfo(t *testing.T) {
	tt := []struct {
		name   string
		ctx    context.Context
		level  infra.Severity
		expect string
	}{
		// #1
		{
			name:   "should log without context id",
			ctx:    context.Background(),
			expect: `{"severity":"Info","message":"[mock]: test"}`,
		},

		// #2
		{
			name:   "should log with context id when the context has value for the id",
			ctx:    context.WithValue(context.Background(), infra.IDContextValueKey, "123"),
			expect: `{"contextID":"123","severity":"Info","message":"[mock]: test"}`,
		},

		// #3
		{
			name:   "should not log when the severity is critical",
			level:  infra.SeverityCritical,
			ctx:    context.Background(),
			expect: "",
		},

		// #4
		{
			name:   "should not log when the severity is error",
			level:  infra.SeverityError,
			ctx:    context.Background(),
			expect: "",
		},

		// #5
		{
			name:   "should not log when the severity is warning",
			level:  infra.SeverityWarning,
			ctx:    context.Background(),
			expect: "",
		},
	}

	for _, tc := range tt {
		log := log.NewClient(log.ClientInput{
			Level: tc.level,
		})

		out := captureOutput(func() {
			log.Info(tc.ctx, infra.OpName("mock"), "test")
		})

		if diff := cmp.Diff(tc.expect, out); diff != "" {
			t.Fatalf("log.Info() mismatch (-want, +got):\n%s", diff)
		}
	}
}

func TestInfof(t *testing.T) {
	tt := []struct {
		name   string
		ctx    context.Context
		level  infra.Severity
		msg    string
		args   []interface{}
		expect string
	}{
		{
			name:   "should log without context id",
			ctx:    context.Background(),
			msg:    "test %s",
			args:   []interface{}{"test"},
			expect: `{"severity":"Info","message":"[mock]: test test"}`,
		},

		// #2
		{
			name:   "should log with context id when the context has value for the id",
			ctx:    context.WithValue(context.Background(), infra.IDContextValueKey, "123"),
			msg:    "test %s %s",
			args:   []interface{}{"test", "test"},
			expect: `{"contextID":"123","severity":"Info","message":"[mock]: test test test"}`,
		},

		// #3
		{
			name:   "should log without placeholders",
			ctx:    context.WithValue(context.Background(), infra.IDContextValueKey, "123"),
			msg:    "test",
			expect: `{"contextID":"123","severity":"Info","message":"[mock]: test"}`,
		},

		// #4
		{
			name:   "should not log when the severity is critical",
			ctx:    context.Background(),
			level:  infra.SeverityCritical,
			msg:    "test",
			expect: "",
		},

		// #5
		{
			name:   "should not log when the severity is error",
			ctx:    context.Background(),
			level:  infra.SeverityError,
			msg:    "test",
			expect: "",
		},

		// #6
		{
			name:   "should not log when the severity is warning",
			ctx:    context.Background(),
			level:  infra.SeverityWarning,
			msg:    "test",
			expect: "",
		},
	}

	for _, tc := range tt {
		log := log.NewClient(log.ClientInput{
			Level: tc.level,
		})

		out := captureOutput(func() {
			log.Infof(tc.ctx, infra.OpName("mock"), tc.msg, tc.args...)
		})

		if diff := cmp.Diff(tc.expect, out); diff != "" {
			t.Fatalf("log.Infof() mismatch (-want, +got):\n%s", diff)
		}
	}
}

func TestInfoMetadata(t *testing.T) {
	tt := []struct {
		name   string
		ctx    context.Context
		level  infra.Severity
		expect string
	}{
		// #1
		{
			name:   "should log without context id",
			ctx:    context.Background(),
			expect: `{"severity":"Info","metadata":{"test":true},"message":"[mock]: test"}`,
		},

		// #2
		{
			name:   "should log with context id when the context has value for the id",
			ctx:    context.WithValue(context.Background(), infra.IDContextValueKey, "123"),
			expect: `{"contextID":"123","severity":"Info","metadata":{"test":true},"message":"[mock]: test"}`,
		},

		// #3
		{
			name:   "should not log when the severity is critical",
			ctx:    context.Background(),
			level:  infra.SeverityCritical,
			expect: "",
		},

		// #4
		{
			name:   "should not log when the severity is error",
			ctx:    context.Background(),
			level:  infra.SeverityError,
			expect: "",
		},

		// #5
		{
			name:   "should not log when the severity is warning",
			ctx:    context.Background(),
			level:  infra.SeverityWarning,
			expect: "",
		},
	}

	for _, tc := range tt {
		log := log.NewClient(log.ClientInput{
			Level: tc.level,
		})

		out := captureOutput(func() {
			log.InfoMetadata(tc.ctx, infra.OpName("mock"), "test", infra.Metadata{
				"test": true,
			})
		})

		if diff := cmp.Diff(tc.expect, out); diff != "" {
			t.Fatalf("log.InfoMetadata() mismatch (-want, +got):\n%s", diff)
		}
	}
}

func TestDebug(t *testing.T) {
	tt := []struct {
		name   string
		ctx    context.Context
		level  infra.Severity
		expect string
	}{
		// #1
		{
			name:   "should log without context id",
			ctx:    context.Background(),
			level:  infra.SeverityDebug,
			expect: `{"severity":"Debug","message":"[mock]: test"}`,
		},

		// #2
		{
			name:   "should log with context id when the context has value for the id",
			ctx:    context.WithValue(context.Background(), infra.IDContextValueKey, "123"),
			level:  infra.SeverityDebug,
			expect: `{"contextID":"123","severity":"Debug","message":"[mock]: test"}`,
		},

		// #3
		{
			name:   "should not log when the severity is critical",
			level:  infra.SeverityCritical,
			ctx:    context.Background(),
			expect: "",
		},

		// #4
		{
			name:   "should not log when the severity is error",
			level:  infra.SeverityError,
			ctx:    context.Background(),
			expect: "",
		},

		// #5
		{
			name:   "should not log when the severity is warning",
			level:  infra.SeverityWarning,
			ctx:    context.Background(),
			expect: "",
		},

		// #6
		{
			name:   "should not log when the severity is info",
			level:  infra.SeverityInfo,
			ctx:    context.Background(),
			expect: "",
		},
	}

	for _, tc := range tt {
		log := log.NewClient(log.ClientInput{
			Level: tc.level,
		})

		out := captureOutput(func() {
			log.Debug(tc.ctx, infra.OpName("mock"), "test")
		})

		if diff := cmp.Diff(tc.expect, out); diff != "" {
			t.Fatalf("log.Debug() mismatch (-want, +got):\n%s", diff)
		}
	}
}

func TestDebugf(t *testing.T) {
	tt := []struct {
		name   string
		ctx    context.Context
		level  infra.Severity
		msg    string
		args   []interface{}
		expect string
	}{
		{
			name:   "should log without context id",
			ctx:    context.Background(),
			msg:    "test %s",
			args:   []interface{}{"test"},
			level:  infra.SeverityDebug,
			expect: `{"severity":"Debug","message":"[mock]: test test"}`,
		},

		// #2
		{
			name:   "should log with context id when the context has value for the id",
			ctx:    context.WithValue(context.Background(), infra.IDContextValueKey, "123"),
			msg:    "test %s %s",
			args:   []interface{}{"test", "test"},
			level:  infra.SeverityDebug,
			expect: `{"contextID":"123","severity":"Debug","message":"[mock]: test test test"}`,
		},

		// #3
		{
			name:   "should log without placeholders",
			ctx:    context.WithValue(context.Background(), infra.IDContextValueKey, "123"),
			msg:    "test",
			level:  infra.SeverityDebug,
			expect: `{"contextID":"123","severity":"Debug","message":"[mock]: test"}`,
		},

		// #4
		{
			name:   "should not log when the severity is critical",
			ctx:    context.Background(),
			level:  infra.SeverityCritical,
			msg:    "test",
			expect: "",
		},

		// #5
		{
			name:   "should not log when the severity is error",
			ctx:    context.Background(),
			level:  infra.SeverityError,
			msg:    "test",
			expect: "",
		},

		// #6
		{
			name:   "should not log when the severity is warning",
			ctx:    context.Background(),
			level:  infra.SeverityWarning,
			msg:    "test",
			expect: "",
		},

		// #7
		{
			name:   "should not log when the severity is info",
			ctx:    context.Background(),
			level:  infra.SeverityInfo,
			msg:    "test",
			expect: "",
		},
	}

	for _, tc := range tt {
		log := log.NewClient(log.ClientInput{
			Level: tc.level,
		})

		out := captureOutput(func() {
			log.Debugf(tc.ctx, infra.OpName("mock"), tc.msg, tc.args...)
		})

		if diff := cmp.Diff(tc.expect, out); diff != "" {
			t.Fatalf("log.Debugf() mismatch (-want, +got):\n%s", diff)
		}
	}
}

func TestDebugMetadata(t *testing.T) {
	tt := []struct {
		name   string
		ctx    context.Context
		level  infra.Severity
		expect string
	}{
		// #1
		{
			name:   "should log without context id",
			ctx:    context.Background(),
			level:  infra.SeverityDebug,
			expect: `{"severity":"Debug","metadata":{"test":true},"message":"[mock]: test"}`,
		},

		// #2
		{
			name:   "should log with context id when the context has value for the id",
			ctx:    context.WithValue(context.Background(), infra.IDContextValueKey, "123"),
			level:  infra.SeverityDebug,
			expect: `{"contextID":"123","severity":"Debug","metadata":{"test":true},"message":"[mock]: test"}`,
		},

		// #3
		{
			name:   "should not log when the severity is critical",
			ctx:    context.Background(),
			level:  infra.SeverityCritical,
			expect: "",
		},

		// #4
		{
			name:   "should not log when the severity is error",
			ctx:    context.Background(),
			level:  infra.SeverityError,
			expect: "",
		},

		// #5
		{
			name:   "should not log when the severity is warning",
			ctx:    context.Background(),
			level:  infra.SeverityWarning,
			expect: "",
		},

		// #6
		{
			name:   "should not log when the severity is info",
			ctx:    context.Background(),
			level:  infra.SeverityInfo,
			expect: "",
		},
	}

	for _, tc := range tt {
		log := log.NewClient(log.ClientInput{
			Level: tc.level,
		})

		out := captureOutput(func() {
			log.DebugMetadata(tc.ctx, infra.OpName("mock"), "test", infra.Metadata{
				"test": true,
			})
		})

		if diff := cmp.Diff(tc.expect, out); diff != "" {
			t.Fatalf("log.DebugMetadata() mismatch (-want, +got):\n%s", diff)
		}
	}
}

func captureOutput(output func()) string {
	rescueStdout := os.Stdout
	r, w, _ := os.Pipe()
	os.Stdout = w

	output()

	w.Close()
	out, _ := ioutil.ReadAll(r)
	os.Stdout = rescueStdout

	return strings.TrimRight(string(out), "\n")
}
