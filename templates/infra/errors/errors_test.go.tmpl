package errors_test

import (
	"context"
	"fmt"
	"reflect"
	"testing"

	"github.com/golang/mock/gomock"

	"{{ .Module }}/infra"
	"{{ .Module }}/infra/errors"

	"{{ .Module }}/mocks"
)

func TestNew(t *testing.T) {
	mockCtx := context.Background()
	mockMetadata := infra.Metadata{}
	mockMetadata2 := infra.Metadata{
		"mock": "mock",
	}

	tt := []struct {
		name string
		args func() []interface{}
		err  *infra.Error
	}{
		// #0
		{
			name: "context filled",
			args: func() []interface{} {
				return []interface{}{
					mockCtx,
					mockMetadata,
				}
			},
			err: &infra.Error{
				Ctx:      mockCtx,
				Metadata: mockMetadata,
			},
		},

		// 1
		{
			name: "error filled",
			args: func() []interface{} {
				return []interface{}{
					fmt.Errorf("mock error"),
					mockMetadata,
				}
			},
			err: &infra.Error{
				Err:      fmt.Errorf("mock error"),
				Metadata: mockMetadata,
			},
		},

		// 2
		{
			name: "opName filled",
			args: func() []interface{} {
				return []interface{}{
					infra.OpName("op mock"),
					mockMetadata,
				}
			},
			err: &infra.Error{
				OpName:   infra.OpName("op mock"),
				Metadata: mockMetadata,
			},
		},

		// 3
		{
			name: "kind filled",
			args: func() []interface{} {
				return []interface{}{
					infra.KindBadRequest,
					mockMetadata,
				}
			},
			err: &infra.Error{
				Kind:     infra.KindBadRequest,
				Metadata: mockMetadata,
			},
		},

		// 4
		{
			name: "severity filled",
			args: func() []interface{} {
				return []interface{}{
					infra.SeverityError,
					mockMetadata,
				}
			},
			err: &infra.Error{
				Severity: infra.SeverityError,
				Metadata: mockMetadata,
			},
		},

		// 5
		{
			name: "metadata filled",
			args: func() []interface{} {
				return []interface{}{
					mockMetadata2,
				}
			},
			err: &infra.Error{
				Metadata: mockMetadata2,
			},
		},

		// 6
		{
			name: "string filled",
			args: func() []interface{} {
				return []interface{}{
					"error mock",
					mockMetadata,
				}
			},
			err: &infra.Error{
				Err:      fmt.Errorf("error mock"),
				Metadata: mockMetadata,
			},
		},

		// 7
		{
			name: "unexpected arg filled",
			args: func() []interface{} {
				return []interface{}{
					1,
					mockMetadata,
				}
			},
			err: &infra.Error{
				Metadata: mockMetadata,
			},
		},

		// 8
		{
			name: "all arg types filled",
			args: func() []interface{} {
				return []interface{}{
					mockCtx,
					infra.OpName("op mock"),
					"error mock",
					infra.KindBadRequest,
					infra.SeverityError,
					mockMetadata,
				}
			},
			err: &infra.Error{
				Ctx:      mockCtx,
				OpName:   infra.OpName("op mock"),
				Err:      fmt.Errorf("error mock"),
				Kind:     infra.KindBadRequest,
				Severity: infra.SeverityError,
				Metadata: mockMetadata,
			},
		},
	}

	for _, tc := range tt {
		t.Run(tc.name, func(t *testing.T) {
			t.Log(tc.args())
			err := errors.New(tc.args()...)

			if !reflect.DeepEqual(err, tc.err) {
				t.Errorf("Expected error '%v', got: '%v'", tc.err, err)
			}
		})
	}
}

func TestContext(t *testing.T) {
	mockCtx := context.WithValue(context.Background(), "mock", "mock")
	mockCtx2 := context.WithValue(context.Background(), "mock2", "mock2")

	tt := []struct {
		name string
		err  func() error
		ctx  context.Context
	}{
		// 0
		{
			name: "pure error",
			err: func() error {
				return fmt.Errorf("mock error")
			},
			ctx: context.Background(),
		},

		// 1
		{
			name: "error with context attached",
			err: func() error {
				return errors.New(mockCtx)
			},
			ctx: mockCtx,
		},

		// 2
		{
			name: "error with context attached in inner layer of recursion",
			err: func() error {
				innerErr := errors.New(mockCtx)
				return errors.New(innerErr)
			},
			ctx: mockCtx,
		},

		// 3
		{
			name: "error with context attached in two layers of recursion",
			err: func() error {
				innerErr := errors.New(mockCtx)
				return errors.New(innerErr, mockCtx2)
			},
			ctx: mockCtx2,
		},
	}

	for _, tc := range tt {
		t.Run(tc.name, func(t *testing.T) {
			ctx := errors.Context(tc.err())

			if ctx != tc.ctx {
				t.Errorf("mismatch context. Expected '%v', got: '%v'", tc.ctx, ctx)
			}
		})
	}
}

func TestTrace(t *testing.T) {
	tt := []struct {
		name  string
		err   func() error
		trace []infra.OpName
	}{
		// #0
		{
			name: "pure error",
			err: func() error {
				return fmt.Errorf("mock error")
			},
			trace: []infra.OpName{},
		},

		// #1
		{
			name: "domain error with opName filled",
			err: func() error {
				return errors.New(infra.OpName("op mock"))
			},
			trace: []infra.OpName{
				infra.OpName("op mock"),
			},
		},

		// #2
		{
			name: "domain error with two nested layers",
			err: func() error {
				innerMost := errors.New(infra.OpName("op mock 0"), fmt.Errorf("mock error"))
				inner := errors.New(innerMost, infra.OpName("op mock 1"))

				return errors.New(inner, infra.OpName("op mock 2"))
			},
			trace: []infra.OpName{
				infra.OpName("op mock 2"),
				infra.OpName("op mock 1"),
				infra.OpName("op mock 0"),
			},
		},

		// #3
		{
			name: "domain error with missing opName in error chain",
			err: func() error {
				innerMost := errors.New(infra.OpName("op mock 0"), fmt.Errorf("mock error"))
				inner := errors.New(innerMost)

				return errors.New(inner, infra.OpName("op mock 2"))
			},
			trace: []infra.OpName{
				infra.OpName("op mock 2"),
				infra.OpName("op mock 0"),
			},
		},
	}

	for _, tc := range tt {
		t.Run(tc.name, func(t *testing.T) {
			trace := errors.Trace(tc.err())

			if !reflect.DeepEqual(trace, tc.trace) {
				t.Errorf("mismatch trace. Expected '%v', got: '%v'", tc.trace, trace)
			}
		})
	}
}

func TestKind(t *testing.T) {
	tt := []struct {
		name string
		err  func() error
		kind infra.ErrorKind
	}{
		// #0
		{
			name: "pure error",
			err: func() error {
				return fmt.Errorf("error mock")
			},
			kind: infra.KindUnexpected,
		},

		// #1
		{
			name: "domain error without kind attached",
			err: func() error {
				return errors.New(fmt.Errorf("error mock"))
			},
			kind: infra.KindUnexpected,
		},

		// #2
		{
			name: "domain error with kind attached",
			err: func() error {
				return errors.New(fmt.Errorf("error mock"), infra.KindBadRequest)
			},
			kind: infra.KindBadRequest,
		},

		// #3
		{
			name: "domain error with two nested layers",
			err: func() error {
				innerMost := errors.New(infra.KindBadRequest)
				inner := errors.New(innerMost)
				return errors.New(inner)
			},
			kind: infra.KindBadRequest,
		},

		// #4
		{
			name: "domain error with two nested layers with kind attached",
			err: func() error {
				innerMost := errors.New(infra.KindBadRequest)
				inner := errors.New(innerMost, infra.KindIncompleteResponse)
				return errors.New(inner)
			},
			kind: infra.KindIncompleteResponse,
		},
	}

	for _, tc := range tt {
		t.Run(tc.name, func(t *testing.T) {
			kind := errors.Kind(tc.err())

			if kind != tc.kind {
				t.Errorf("mismatch kind. Expected '%d', got: '%d'", tc.kind, kind)
			}
		})
	}
}

func TestSeverity(t *testing.T) {
	tt := []struct {
		name     string
		err      func() error
		severity infra.Severity
	}{
		// #0
		{
			name: "pure error",
			err: func() error {
				return fmt.Errorf("error mock")
			},
			severity: infra.SeverityError,
		},

		// #1
		{
			name: "domain error without severity attached",
			err: func() error {
				return errors.New(fmt.Errorf("error mock"))
			},
			severity: infra.SeverityError,
		},

		// #2
		{
			name: "domain error with severity attached",
			err: func() error {
				return errors.New(fmt.Errorf("error mock"), infra.SeverityCritical)
			},
			severity: infra.SeverityCritical,
		},

		// #3
		{
			name: "domain error with two nested layers",
			err: func() error {
				innerMost := errors.New(infra.SeverityCritical)
				inner := errors.New(innerMost)
				return errors.New(inner)
			},
			severity: infra.SeverityCritical,
		},

		// #4
		{
			name: "domain error with two nested layers with severity attached",
			err: func() error {
				innerMost := errors.New(infra.SeverityCritical)
				inner := errors.New(innerMost, infra.SeverityWarning)
				return errors.New(inner)
			},
			severity: infra.SeverityWarning,
		},
	}

	for _, tc := range tt {
		t.Run(tc.name, func(t *testing.T) {
			severity := errors.Severity(tc.err())

			if severity != tc.severity {
				t.Errorf("mismatch severity. Expected '%s', got: '%s'", tc.severity, severity)
			}
		})
	}
}

func TestMetadata(t *testing.T) {
	tt := []struct {
		name     string
		err      func() error
		metadata infra.Metadata
	}{
		// #0
		{
			name: "pure error",
			err: func() error {
				return fmt.Errorf("error mock")
			},
			metadata: infra.Metadata{},
		},

		// #1
		{
			name: "domain error without metadata",
			err: func() error {
				return errors.New(fmt.Errorf("error mock"))
			},
			metadata: infra.Metadata{},
		},

		// #2
		{
			name: "domain error with metadata",
			err: func() error {
				return errors.New(fmt.Errorf("error mock"), infra.Metadata{
					"mock": "mock",
				})
			},
			metadata: infra.Metadata{
				"mock": "mock",
			},
		},

		// #3
		{
			name: "domain error with two layers, each one with their own metadata",
			err: func() error {
				innerMost := errors.New(fmt.Errorf("error mock"), infra.Metadata{
					"mock0": "mock0",
				})
				inner := errors.New(innerMost, infra.Metadata{
					"mock1": "mock1",
				})

				return errors.New(inner)
			},
			metadata: infra.Metadata{
				"mock0": "mock0",
				"mock1": "mock1",
			},
		},

		// #4
		{
			name: "domain error with two layers, each one with their own metadata but some of them conflicting",
			err: func() error {
				innerMost := errors.New(fmt.Errorf("error mock"), infra.Metadata{
					"mock0":         "mock0",
					"mock_conflict": "mock_conflict0",
				})
				inner := errors.New(innerMost, infra.Metadata{
					"mock1":         "mock1",
					"mock_conflict": "mock_conflict1",
				})

				return errors.New(inner)
			},
			metadata: infra.Metadata{
				"mock0":         "mock0",
				"mock1":         "mock1",
				"mock_conflict": "mock_conflict1",
			},
		},
	}

	for _, tc := range tt {
		t.Run(tc.name, func(t *testing.T) {
			metadata := errors.Metadata(tc.err())

			if !reflect.DeepEqual(metadata, tc.metadata) {
				t.Errorf("mismatch metadata. Expeceted '%v', got: '%v'", tc.metadata, metadata)
			}
		})
	}
}

func TestOpName(t *testing.T) {
	tt := []struct {
		name   string
		err    func() error
		opName infra.OpName
	}{
		// #0
		{
			name: "pure error",
			err: func() error {
				return fmt.Errorf("error mock")
			},
			opName: infra.OpName(""),
		},

		// #1
		{
			name: "domain error without opName attached",
			err: func() error {
				return errors.New(fmt.Errorf("error mock"))
			},
			opName: infra.OpName(""),
		},

		// #2
		{
			name: "domain error with opName attached",
			err: func() error {
				return errors.New(fmt.Errorf("error mock"), infra.OpName("op mock"))
			},
			opName: infra.OpName("op mock"),
		},

		// #2
		{
			name: "domain error with two inner layers",
			err: func() error {
				innerMost := errors.New(fmt.Errorf("error mock"), infra.OpName("op mock0"))
				inner := errors.New(innerMost, infra.OpName("op mock1"))
				return errors.New(inner, infra.OpName("op mock2"))
			},
			opName: infra.OpName("op mock0"),
		},
	}

	for _, tc := range tt {
		t.Run(tc.name, func(t *testing.T) {
			opName := errors.OpName(tc.err())

			if opName != tc.opName {
				t.Errorf("mismatch opName. Expected '%s', got: '%s'", tc.opName, opName)
			}
		})
	}
}

func TestError(t *testing.T) {
	mockErr := fmt.Errorf("error mock")

	tt := []struct {
		name     string
		err      func() *infra.Error
		expected error
	}{
		// #0
		{
			name: "basic domain error",
			err: func() *infra.Error {
				return errors.New(mockErr)
			},
			expected: mockErr,
		},

		// #0
		{
			name: "domain error with two layers of errors",
			err: func() *infra.Error {
				innerMost := errors.New(mockErr)
				inner := errors.New(innerMost)
				return errors.New(inner)
			},
			expected: mockErr,
		},
	}

	for _, tc := range tt {
		t.Run(tc.name, func(t *testing.T) {
			err := errors.Error(tc.err())

			if err != tc.expected {
				t.Errorf("mismatch error. Expected '%v', got: '%v'", tc.expected, err)
			}
		})
	}
}

func TestLog(t *testing.T) {
	t.Run("pure error", func(t *testing.T) {
		ctrl := gomock.NewController(t)
		defer ctrl.Finish()

		errM := fmt.Errorf("error mock")

		logM := mocks.NewMockLogProvider(ctrl)

		logM.
			EXPECT().
			ErrorMetadata(
				context.Background(),
				infra.OpName(""),
				errM.Error(),
				infra.Metadata{
					"trace": errors.Trace(errM),
					"kind":  errors.Kind(errM),
				},
			).
			Times(1)

		errors.Log(logM, errM)
	})

	t.Run("domain errors", func(t *testing.T) {
		baseErr := errors.New(
			context.Background(),
			infra.OpName("op mock"),
			fmt.Errorf("error mock"),
			infra.Metadata{
				"mock": "mock",
			},
		)

		tt := []struct {
			name     string
			severity infra.Severity
			log      func(*gomock.Controller) infra.LogProvider
		}{
			// #0
			{
				name:     "log with Critial severity",
				severity: infra.SeverityCritical,
				log: func(ctrl *gomock.Controller) infra.LogProvider {
					logM := mocks.NewMockLogProvider(ctrl)

					logM.
						EXPECT().
						CriticalMetadata(
							baseErr.Ctx,
							baseErr.OpName,
							baseErr.Err.Error(),
							baseErr.Metadata.Merge(&infra.Metadata{
								"trace": errors.Trace(baseErr),
								"kind":  errors.Kind(baseErr),
							}),
						).
						Times(1)

					return logM
				},
			},

			// #1
			{
				name:     "log with Error severity",
				severity: infra.SeverityError,
				log: func(ctrl *gomock.Controller) infra.LogProvider {
					logM := mocks.NewMockLogProvider(ctrl)

					logM.
						EXPECT().
						ErrorMetadata(
							baseErr.Ctx,
							baseErr.OpName,
							baseErr.Err.Error(),
							baseErr.Metadata.Merge(&infra.Metadata{
								"trace": errors.Trace(baseErr),
								"kind":  errors.Kind(baseErr),
							}),
						).
						Times(1)

					return logM
				},
			},

			// #2
			{
				name:     "log with Warning severity",
				severity: infra.SeverityWarning,
				log: func(ctrl *gomock.Controller) infra.LogProvider {
					logM := mocks.NewMockLogProvider(ctrl)

					logM.
						EXPECT().
						WarningMetadata(
							baseErr.Ctx,
							baseErr.OpName,
							baseErr.Err.Error(),
							baseErr.Metadata.Merge(&infra.Metadata{
								"trace": errors.Trace(baseErr),
								"kind":  errors.Kind(baseErr),
							}),
						).
						Times(1)

					return logM
				},
			},

			// #3
			{
				name:     "log with Info severity",
				severity: infra.SeverityInfo,
				log: func(ctrl *gomock.Controller) infra.LogProvider {
					logM := mocks.NewMockLogProvider(ctrl)

					logM.
						EXPECT().
						InfoMetadata(
							baseErr.Ctx,
							baseErr.OpName,
							baseErr.Err.Error(),
							baseErr.Metadata.Merge(&infra.Metadata{
								"trace": errors.Trace(baseErr),
								"kind":  errors.Kind(baseErr),
							}),
						).
						Times(1)

					return logM
				},
			},

			// #4
			{
				name:     "log with Debug severity",
				severity: infra.SeverityDebug,
				log: func(ctrl *gomock.Controller) infra.LogProvider {
					logM := mocks.NewMockLogProvider(ctrl)

					logM.
						EXPECT().
						DebugMetadata(
							baseErr.Ctx,
							baseErr.OpName,
							baseErr.Err.Error(),
							baseErr.Metadata.Merge(&infra.Metadata{
								"trace": errors.Trace(baseErr),
								"kind":  errors.Kind(baseErr),
							}),
						).
						Times(1)

					return logM
				},
			},
		}

		for _, tc := range tt {
			t.Run(tc.name, func(t *testing.T) {
				ctrl := gomock.NewController(t)
				defer ctrl.Finish()

				errors.Log(tc.log(ctrl), errors.New(baseErr, tc.severity))
			})
		}
	})
}
