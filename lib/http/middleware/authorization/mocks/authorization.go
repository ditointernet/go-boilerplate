// Code generated by MockGen. DO NOT EDIT.
// Source: contracts.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	authorization "github.com/ditointernet/go-dito/lib/http/middleware/authorization"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthorizatorClient is a mock of AuthorizatorClient interface.
type MockAuthorizatorClient struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizatorClientMockRecorder
}

// MockAuthorizatorClientMockRecorder is the mock recorder for MockAuthorizatorClient.
type MockAuthorizatorClientMockRecorder struct {
	mock *MockAuthorizatorClient
}

// NewMockAuthorizatorClient creates a new mock instance.
func NewMockAuthorizatorClient(ctrl *gomock.Controller) *MockAuthorizatorClient {
	mock := &MockAuthorizatorClient{ctrl: ctrl}
	mock.recorder = &MockAuthorizatorClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorizatorClient) EXPECT() *MockAuthorizatorClientMockRecorder {
	return m.recorder
}

// DecideIfAllowed mocks base method.
func (m *MockAuthorizatorClient) DecideIfAllowed(ctx context.Context, regoQuery, method, path, brandID, userID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecideIfAllowed", ctx, regoQuery, method, path, brandID, userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecideIfAllowed indicates an expected call of DecideIfAllowed.
func (mr *MockAuthorizatorClientMockRecorder) DecideIfAllowed(ctx, regoQuery, method, path, brandID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecideIfAllowed", reflect.TypeOf((*MockAuthorizatorClient)(nil).DecideIfAllowed), ctx, regoQuery, method, path, brandID, userID)
}

// ExecuteQuery mocks base method.
func (m *MockAuthorizatorClient) ExecuteQuery(ctx context.Context, query string, input map[string]interface{}) (authorization.AuthQueryResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteQuery", ctx, query, input)
	ret0, _ := ret[0].(authorization.AuthQueryResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteQuery indicates an expected call of ExecuteQuery.
func (mr *MockAuthorizatorClientMockRecorder) ExecuteQuery(ctx, query, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteQuery", reflect.TypeOf((*MockAuthorizatorClient)(nil).ExecuteQuery), ctx, query, input)
}

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Critical mocks base method.
func (m *MockLogger) Critical(ctx context.Context, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Critical", ctx, err)
}

// Critical indicates an expected call of Critical.
func (mr *MockLoggerMockRecorder) Critical(ctx, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Critical", reflect.TypeOf((*MockLogger)(nil).Critical), ctx, err)
}

// Debug mocks base method.
func (m *MockLogger) Debug(ctx context.Context, msg string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debug", varargs...)
}

// Debug indicates an expected call of Debug.
func (mr *MockLoggerMockRecorder) Debug(ctx, msg interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockLogger)(nil).Debug), varargs...)
}

// Error mocks base method.
func (m *MockLogger) Error(ctx context.Context, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Error", ctx, err)
}

// Error indicates an expected call of Error.
func (mr *MockLoggerMockRecorder) Error(ctx, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLogger)(nil).Error), ctx, err)
}

// Info mocks base method.
func (m *MockLogger) Info(ctx context.Context, msg string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockLoggerMockRecorder) Info(ctx, msg interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockLogger)(nil).Info), varargs...)
}

// Warning mocks base method.
func (m *MockLogger) Warning(ctx context.Context, msg string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warning", varargs...)
}

// Warning indicates an expected call of Warning.
func (mr *MockLoggerMockRecorder) Warning(ctx, msg interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warning", reflect.TypeOf((*MockLogger)(nil).Warning), varargs...)
}
