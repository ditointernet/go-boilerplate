// Code generated by MockGen. DO NOT EDIT.
// Source: client/contracts.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	http "github.com/ditointernet/go-dito/lib/http"
	gomock "github.com/golang/mock/gomock"
)

// MockHttpClient is a mock of HttpClient interface.
type MockHttpClient struct {
	ctrl     *gomock.Controller
	recorder *MockHttpClientMockRecorder
}

// MockHttpClientMockRecorder is the mock recorder for MockHttpClient.
type MockHttpClientMockRecorder struct {
	mock *MockHttpClient
}

// NewMockHttpClient creates a new mock instance.
func NewMockHttpClient(ctrl *gomock.Controller) *MockHttpClient {
	mock := &MockHttpClient{ctrl: ctrl}
	mock.recorder = &MockHttpClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHttpClient) EXPECT() *MockHttpClientMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockHttpClient) Delete(ctx context.Context, request http.HttpRequest) (http.HttpResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, request)
	ret0, _ := ret[0].(http.HttpResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockHttpClientMockRecorder) Delete(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockHttpClient)(nil).Delete), ctx, request)
}

// Get mocks base method.
func (m *MockHttpClient) Get(ctx context.Context, request http.HttpRequest) (http.HttpResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, request)
	ret0, _ := ret[0].(http.HttpResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockHttpClientMockRecorder) Get(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockHttpClient)(nil).Get), ctx, request)
}

// Patch mocks base method.
func (m *MockHttpClient) Patch(ctx context.Context, request http.HttpRequest) (http.HttpResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Patch", ctx, request)
	ret0, _ := ret[0].(http.HttpResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Patch indicates an expected call of Patch.
func (mr *MockHttpClientMockRecorder) Patch(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockHttpClient)(nil).Patch), ctx, request)
}

// Post mocks base method.
func (m *MockHttpClient) Post(ctx context.Context, request http.HttpRequest) (http.HttpResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", ctx, request)
	ret0, _ := ret[0].(http.HttpResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Post indicates an expected call of Post.
func (mr *MockHttpClientMockRecorder) Post(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockHttpClient)(nil).Post), ctx, request)
}

// PostForm mocks base method.
func (m *MockHttpClient) PostForm(ctx context.Context, request http.HttpRequest) (http.HttpResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostForm", ctx, request)
	ret0, _ := ret[0].(http.HttpResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostForm indicates an expected call of PostForm.
func (mr *MockHttpClientMockRecorder) PostForm(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostForm", reflect.TypeOf((*MockHttpClient)(nil).PostForm), ctx, request)
}

// Put mocks base method.
func (m *MockHttpClient) Put(ctx context.Context, request http.HttpRequest) (http.HttpResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", ctx, request)
	ret0, _ := ret[0].(http.HttpResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockHttpClientMockRecorder) Put(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockHttpClient)(nil).Put), ctx, request)
}
